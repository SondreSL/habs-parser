

module BNFC_Gen.AbsABS where

-- Haskell module generated by the BNF converter




newtype UIdent = UIdent ((Int,Int),String)
  deriving (Show, Read)
newtype LIdent = LIdent ((Int,Int),String)
  deriving (Show, Read)
data AnyIdent = AnyIden LIdent | AnyTyIden UIdent
  deriving (Show, Read)

data Program = Prog [Module]
  deriving (Show, Read)

data Module = Modul QType [Export] [Import] [AnnotDecl] MaybeBlock
  deriving (Show, Read)

data Export
    = AnyExport [AnyIdent]
    | AnyFromExport [AnyIdent] QType
    | StarExport
    | StarFromExport QType
  deriving (Show, Read)

data Import
    = AnyImport ImportType TType [AnyIdent]
    | AnyFromImport ImportType [AnyIdent] QType
    | StarFromImport ImportType QType
  deriving (Show, Read)

data ImportType = ForeignImport | NormalImport
  deriving (Show, Read)

data Type = TUnderscore | TSimple QType | TGen QType [Type]
  deriving (Show, Read)

data QType = QTyp [QTypeSegment]
  deriving (Show, Read)

data QTypeSegment = QTypeSegmen UIdent
  deriving (Show, Read)

data TType = TTyp [TTypeSegment]
  deriving (Show, Read)

data TTypeSegment = TTypeSegmen UIdent
  deriving (Show, Read)

data Decl
    = TypeDecl UIdent Type
    | TypeParDecl UIdent [UIdent] Type
    | ExceptionDecl ConstrIdent
    | DataDecl UIdent [ConstrIdent]
    | DataParDecl UIdent [UIdent] [ConstrIdent]
    | FunDecl Type LIdent [Param] FunBody
    | FunParDecl Type LIdent [UIdent] [Param] FunBody
    | InterfDecl UIdent [AnnotMethSignat]
    | ExtendsDecl UIdent [QType] [AnnotMethSignat]
    | ClassDecl UIdent [ClassBody] MaybeBlock [ClassBody]
    | ClassParamDecl UIdent [Param] [ClassBody] MaybeBlock [ClassBody]
    | ClassImplements UIdent [QType] [ClassBody] MaybeBlock [ClassBody]
    | ClassParamImplements UIdent [Param] [QType] [ClassBody] MaybeBlock [ClassBody]
  deriving (Show, Read)

data ConstrIdent
    = SinglConstrIdent UIdent | ParamConstrIdent UIdent [ConstrType]
  deriving (Show, Read)

data ConstrType
    = EmptyConstrType Type | RecordConstrType Type LIdent
  deriving (Show, Read)

data FunBody = BuiltinFunBody | NormalFunBody PureExp
  deriving (Show, Read)

data MethSignat = MethSig Type LIdent [Param]
  deriving (Show, Read)

data ClassBody
    = FieldClassBody Type LIdent
    | FieldAssignClassBody Type LIdent PureExp
    | MethClassBody Type LIdent [Param] Block
  deriving (Show, Read)

data Block = Bloc [AnnotStm]
  deriving (Show, Read)

data MaybeBlock = JustBlock [Annot] Block | NoBlock
  deriving (Show, Read)

data Param = Par Type LIdent
  deriving (Show, Read)

data Stm
    = SExp Exp
    | SBlock [AnnotStm]
    | SWhile PureExp AnnotStm
    | SReturn Exp
    | SAss LIdent Exp
    | SFieldAss LIdent Exp
    | SDec Type LIdent
    | SDecAss Type LIdent Exp
    | SIf PureExp AnnotStm
    | SIfElse PureExp AnnotStm AnnotStm
    | SSuspend
    | SSkip
    | SAssert PureExp
    | SAwait AwaitGuard
    | SThrow PureExp
    | SGive PureExp PureExp
    | STryCatchFinally AnnotStm [CatchBranch] MaybeFinally
    | SPrint PureExp
  deriving (Show, Read)

data CatchBranch = CatchBranc Pattern AnnotStm
  deriving (Show, Read)

data MaybeFinally = JustFinally AnnotStm | NoFinally
  deriving (Show, Read)

data AwaitGuard
    = FutGuard LIdent
    | ProGuard LIdent
    | FutFieldGuard LIdent
    | ProFieldGuard LIdent
    | ExpGuard PureExp
    | AndGuard AwaitGuard AwaitGuard
  deriving (Show, Read)

data Exp = ExpP PureExp | ExpE EffExp
  deriving (Show, Read)

data PureExp
    = EOr PureExp PureExp
    | EAnd PureExp PureExp
    | EEq PureExp PureExp
    | ENeq PureExp PureExp
    | ELt PureExp PureExp
    | ELe PureExp PureExp
    | EGt PureExp PureExp
    | EGe PureExp PureExp
    | EAdd PureExp PureExp
    | ESub PureExp PureExp
    | EMul PureExp PureExp
    | EDiv PureExp PureExp
    | EMod PureExp PureExp
    | ELogNeg PureExp
    | EIntNeg PureExp
    | EFunCall LIdent [PureExp]
    | EQualFunCall TType LIdent [PureExp]
    | ENaryFunCall LIdent [PureExp]
    | ENaryQualFunCall TType LIdent [PureExp]
    | EVar LIdent
    | EThis LIdent
    | EQualVar TType LIdent
    | ESinglConstr QType
    | EParamConstr QType [PureExp]
    | ELit Literal
    | Let Param PureExp PureExp
    | If PureExp PureExp PureExp
    | Case PureExp [CaseBranch]
  deriving (Show, Read)

data CaseBranch = CaseBranc Pattern PureExp
  deriving (Show, Read)

data Pattern
    = PIdent LIdent
    | PLit Literal
    | PSinglConstr UIdent
    | PParamConstr UIdent [Pattern]
    | PUnderscore
  deriving (Show, Read)

data Literal = LNull | LThis | LThisDC | LStr String | LInt Integer
  deriving (Show, Read)

data EffExp
    = New Type [PureExp]
    | NewLocal Type [PureExp]
    | SyncMethCall PureExp LIdent [PureExp]
    | ThisSyncMethCall LIdent [PureExp]
    | AsyncMethCall PureExp LIdent [PureExp]
    | ThisAsyncMethCall LIdent [PureExp]
    | Get PureExp
    | ProGet PureExp
    | ProNew
    | ProEmpty PureExp
    | ProTry PureExp
    | Spawns PureExp Type [PureExp]
  deriving (Show, Read)

data Annot = Ann Annot_
  deriving (Show, Read)

data Annot_ = AnnWithType Type PureExp | AnnNoType PureExp
  deriving (Show, Read)

data AnnotStm = AnnStm [Annot] Stm
  deriving (Show, Read)

data AnnotDecl = AnnDec [Annot] Decl
  deriving (Show, Read)

data AnnotMethSignat = AnnMethSig [Annot] MethSignat
  deriving (Show, Read)

