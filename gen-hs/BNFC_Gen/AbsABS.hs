

module BNFC_Gen.AbsABS where

-- Haskell module generated by the BNF converter




newtype U = U ((Int,Int),String) deriving (Show, Read)
newtype L = L ((Int,Int),String) deriving (Show, Read)
data Literal = LNull | LThis | LStr String | LInt Integer | LThisDC
  deriving (Show, Read)

data QU = U_ U | QU U QU
  deriving (Show, Read)

data QL = L_ L | QL U QL
  deriving (Show, Read)

data QA = LA L | UA U | QA U QA
  deriving (Show, Read)

data T = TSimple QU | TGen QU [T] | TInfer
  deriving (Show, Read)

data Param = Par T L
  deriving (Show, Read)

data Program = Program [Module]
  deriving (Show, Read)

data Module = Module QU [Export] [Import] [AnnDecl] MaybeBlock
  deriving (Show, Read)

data Export
    = StarExport
    | StarFromExport QU
    | AnyExport [QA]
    | AnyFromExport [QA] QU
  deriving (Show, Read)

data Import
    = StarFromImport IsForeign QU
    | AnyImport IsForeign [QA]
    | AnyFromImport IsForeign [QA] QU
  deriving (Show, Read)

data IsForeign = Native | Foreign
  deriving (Show, Read)

data Decl
    = TypeDecl U T
    | TypeParDecl U [U] T
    | ExceptionDecl ConstrIdent
    | DataDecl U [ConstrIdent]
    | DataParDecl U [U] [ConstrIdent]
    | FunDecl T L [Param] FunBody
    | FunParDecl T L [U] [Param] FunBody
    | InterfDecl U [MethSignat]
    | ExtendsDecl U [QU] [MethSignat]
    | ClassDecl U [ClassBody] MaybeBlock [ClassBody]
    | ClassParamDecl U [Param] [ClassBody] MaybeBlock [ClassBody]
    | ClassImplements U [QU] [ClassBody] MaybeBlock [ClassBody]
    | ClassParamImplements U [Param] [QU] [ClassBody] MaybeBlock [ClassBody]
  deriving (Show, Read)

data ConstrIdent
    = SinglConstrIdent U | ParamConstrIdent U [ConstrType]
  deriving (Show, Read)

data ConstrType = EmptyConstrType T | RecordConstrType T L
  deriving (Show, Read)

data FunBody = BuiltinFunBody | NormalFunBody PureExp
  deriving (Show, Read)

data MethSignat = MethSignat [Ann] T L [Param]
  deriving (Show, Read)

data ClassBody
    = FieldClassBody T L
    | FieldAssignClassBody T L PureExp
    | MethClassBody T L [Param] [AnnStm]
  deriving (Show, Read)

data Stm
    = SExp Exp
    | SSkip
    | SSuspend
    | SReturn Exp
    | SAssert PureExp
    | SPrint PureExp
    | SAwait AwaitGuard
    | SAss L Exp
    | SFieldAss L Exp
    | SDec T L
    | SDecAss T L Exp
    | SWhile PureExp AnnStm
    | SIf PureExp Stm
    | SIfElse PureExp Stm Stm
    | SBlock [AnnStm]
    | SThrow PureExp
    | STryCatchFinally AnnStm [CatchBranch] MaybeFinally
    | SGive PureExp PureExp
  deriving (Show, Read)

data AwaitGuard
    = ExpGuard PureExp
    | FutFieldGuard L
    | FutGuard L
    | AndGuard AwaitGuard AwaitGuard
  deriving (Show, Read)

data Exp = ExpP PureExp | ExpE EffExp
  deriving (Show, Read)

data PureExp
    = EOr PureExp PureExp
    | EAnd PureExp PureExp
    | EEq PureExp PureExp
    | ENeq PureExp PureExp
    | ELt PureExp PureExp
    | ELe PureExp PureExp
    | EGt PureExp PureExp
    | EGe PureExp PureExp
    | EAdd PureExp PureExp
    | ESub PureExp PureExp
    | EMul PureExp PureExp
    | EDiv PureExp PureExp
    | EMod PureExp PureExp
    | ELogNeg PureExp
    | EIntNeg PureExp
    | EFunCall QL [PureExp]
    | ENaryFunCall QL [PureExp]
    | EVar L
    | EThis L
    | ESinglConstr QU
    | EParamConstr QU [PureExp]
    | ELit Literal
    | Let Param PureExp PureExp
    | If PureExp PureExp PureExp
    | Case PureExp [CaseBranch]
  deriving (Show, Read)

data CaseBranch = CaseBranc Pattern PureExp
  deriving (Show, Read)

data Pattern
    = PLit Literal
    | PIdent L
    | PSinglConstr QU
    | PParamConstr QU [Pattern]
    | PUnderscore
  deriving (Show, Read)

data EffExp
    = New QU [PureExp]
    | NewLocal QU [PureExp]
    | SyncMethCall PureExp L [PureExp]
    | ThisSyncMethCall L [PureExp]
    | AsyncMethCall PureExp L [PureExp]
    | AwaitMethCall PureExp L [PureExp]
    | ThisAsyncMethCall L [PureExp]
    | Get PureExp
    | ProNew
    | ProTry PureExp
  deriving (Show, Read)

data Ann = Ann Ann_
  deriving (Show, Read)

data Ann_ = AnnNoType PureExp | AnnWithType T PureExp
  deriving (Show, Read)

data AnnStm = AnnStm [Ann] Stm
  deriving (Show, Read)

data AnnDecl = AnnDecl [Ann] Decl
  deriving (Show, Read)

data CatchBranch = CatchBranc Pattern AnnStm
  deriving (Show, Read)

data MaybeFinally = JustFinally AnnStm | NoFinally
  deriving (Show, Read)

data MaybeBlock = JustBlock [AnnStm] | NoBlock
  deriving (Show, Read)

