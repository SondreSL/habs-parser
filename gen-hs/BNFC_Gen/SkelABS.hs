module BNFC_Gen.SkelABS where

-- Haskell module generated by the BNF converter

import BNFC_Gen.AbsABS
import BNFC_Gen.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transU :: U -> Result
transU x = case x of
  U string -> failure x
transL :: L -> Result
transL x = case x of
  L string -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  LNull -> failure x
  LThis -> failure x
  LStr string -> failure x
  LInt integer -> failure x
  LThisDC -> failure x
transQU :: QU -> Result
transQU x = case x of
  U_ u -> failure x
  QU u qu -> failure x
transQL :: QL -> Result
transQL x = case x of
  L_ l -> failure x
  QL u ql -> failure x
transQA :: QA -> Result
transQA x = case x of
  LA l -> failure x
  UA u -> failure x
  QA u qa -> failure x
transT :: T -> Result
transT x = case x of
  TSimple qu -> failure x
  TPoly qu ts -> failure x
  TInfer -> failure x
transFormalPar :: FormalPar -> Result
transFormalPar x = case x of
  FormalPar t l -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program modules -> failure x
transModule :: Module -> Result
transModule x = case x of
  Module qu exports imports anndecls maybeblock -> failure x
transExport :: Export -> Result
transExport x = case x of
  StarExport -> failure x
  StarFromExport qu -> failure x
  AnyExport qas -> failure x
  AnyFromExport qas qu -> failure x
transImport :: Import -> Result
transImport x = case x of
  StarFromImport isforeign qu -> failure x
  AnyImport isforeign qas -> failure x
  AnyFromImport isforeign qas qu -> failure x
transIsForeign :: IsForeign -> Result
transIsForeign x = case x of
  Native -> failure x
  Foreign -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DType u t -> failure x
  DTypePoly u us t -> failure x
  DData u constridents -> failure x
  DDataPoly u us constridents -> failure x
  DFun t l formalpars funbody -> failure x
  DFunPoly t l us formalpars funbody -> failure x
  DInterf u methsignats -> failure x
  DExtends u qus methsignats -> failure x
  DClass u classbodys1 maybeblock classbodys2 -> failure x
  DClassPar u formalpars classbodys1 maybeblock classbodys2 -> failure x
  DClassImplements u qus classbodys1 maybeblock classbodys2 -> failure x
  DClassParImplements u formalpars qus classbodys1 maybeblock classbodys2 -> failure x
  DException constrident -> failure x
transConstrIdent :: ConstrIdent -> Result
transConstrIdent x = case x of
  SinglConstrIdent u -> failure x
  ParamConstrIdent u constrtypes -> failure x
transConstrType :: ConstrType -> Result
transConstrType x = case x of
  EmptyConstrType t -> failure x
  RecordConstrType t l -> failure x
transFunBody :: FunBody -> Result
transFunBody x = case x of
  BuiltinFunBody -> failure x
  NormalFunBody pureexp -> failure x
transMethSignat :: MethSignat -> Result
transMethSignat x = case x of
  MethSignat anns t l formalpars -> failure x
transClassBody :: ClassBody -> Result
transClassBody x = case x of
  FieldClassBody t l -> failure x
  FieldAssignClassBody t l pureexp -> failure x
  MethClassBody t l formalpars annstms -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SSkip -> failure x
  SSuspend -> failure x
  SReturn exp -> failure x
  SAssert pureexp -> failure x
  SPrint pureexp -> failure x
  SAwait awaitguard -> failure x
  SAss l exp -> failure x
  SFieldAss l exp -> failure x
  SDec t l -> failure x
  SDecAss t l exp -> failure x
  SWhile pureexp annstm -> failure x
  SIf pureexp stm -> failure x
  SIfElse pureexp stm1 stm2 -> failure x
  SCase pureexp scasebranchs -> failure x
  SBlock annstms -> failure x
  SExp exp -> failure x
  SThrow pureexp -> failure x
  STryCatchFinally annstm scasebranchs maybefinally -> failure x
  SGive pureexp1 pureexp2 -> failure x
transSCaseBranch :: SCaseBranch -> Result
transSCaseBranch x = case x of
  SCaseBranch pattern annstm -> failure x
transAwaitGuard :: AwaitGuard -> Result
transAwaitGuard x = case x of
  GFut l -> failure x
  GFutField l -> failure x
  GExp pureexp -> failure x
  GAnd awaitguard1 awaitguard2 -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExpP pureexp -> failure x
  ExpE effexp -> failure x
transPureExp :: PureExp -> Result
transPureExp x = case x of
  EOr pureexp1 pureexp2 -> failure x
  EAnd pureexp1 pureexp2 -> failure x
  EEq pureexp1 pureexp2 -> failure x
  ENeq pureexp1 pureexp2 -> failure x
  ELt pureexp1 pureexp2 -> failure x
  ELe pureexp1 pureexp2 -> failure x
  EGt pureexp1 pureexp2 -> failure x
  EGe pureexp1 pureexp2 -> failure x
  EAdd pureexp1 pureexp2 -> failure x
  ESub pureexp1 pureexp2 -> failure x
  EMul pureexp1 pureexp2 -> failure x
  EDiv pureexp1 pureexp2 -> failure x
  EMod pureexp1 pureexp2 -> failure x
  ELogNeg pureexp -> failure x
  EIntNeg pureexp -> failure x
  EFunCall ql pureexps -> failure x
  ENaryFunCall ql pureexps -> failure x
  EVar l -> failure x
  EThis l -> failure x
  ESinglConstr qu -> failure x
  EParamConstr qu pureexps -> failure x
  ELit literal -> failure x
  ELet formalpar pureexp1 pureexp2 -> failure x
  EIf pureexp1 pureexp2 pureexp3 -> failure x
  ECase pureexp ecasebranchs -> failure x
transECaseBranch :: ECaseBranch -> Result
transECaseBranch x = case x of
  ECaseBranch pattern pureexp -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PLit literal -> failure x
  PVar l -> failure x
  PSinglConstr qu -> failure x
  PParamConstr qu patterns -> failure x
  PWildcard -> failure x
transEffExp :: EffExp -> Result
transEffExp x = case x of
  New qu pureexps -> failure x
  NewLocal qu pureexps -> failure x
  SyncMethCall pureexp l pureexps -> failure x
  ThisSyncMethCall l pureexps -> failure x
  AsyncMethCall pureexp l pureexps -> failure x
  AwaitMethCall pureexp l pureexps -> failure x
  ThisAsyncMethCall l pureexps -> failure x
  Get pureexp -> failure x
  ProNew -> failure x
  ProTry pureexp -> failure x
transAnn :: Ann -> Result
transAnn x = case x of
  Ann ann -> failure x
transAnn_ :: Ann_ -> Result
transAnn_ x = case x of
  AnnNoType pureexp -> failure x
  AnnWithType t pureexp -> failure x
transAnnStm :: AnnStm -> Result
transAnnStm x = case x of
  AnnStm anns stm -> failure x
transAnnDecl :: AnnDecl -> Result
transAnnDecl x = case x of
  AnnDecl anns decl -> failure x
transMaybeFinally :: MaybeFinally -> Result
transMaybeFinally x = case x of
  JustFinally annstm -> failure x
  NoFinally -> failure x
transMaybeBlock :: MaybeBlock -> Result
transMaybeBlock x = case x of
  JustBlock annstms -> failure x
  NoBlock -> failure x

